Lecture: Basic Plot with matplotlib
Review Question 1
What is the characteristic about data visualization?
Answer : Visualization is a very powerful tool for exploring your data and reporting results. 

Review Question 2
What is the conventional way of importing the pyplot sub-package from the matplotlib package?
Answer : import matplotlib.pyplot as plt

Review Question 3
You are creating a line plot using the following code:
a = [1, 2, 3, 4]
b = [3, 9, 2, 6]
plt.plot(a, b)
plt.show()
Which two options describe the result of your code?
Answer : The values in a are mapped onto the horizontal axis.
         The values in b are mapped onto the vertical axis.

Review Question 4
You are modifying the following code that calls the plot() function to create a line plot:
a = [1, 2, 3, 4]
b = [3, 9, 2, 6]
plt.plot(a, b)
plt.show()
What should you change in the code to create a scatter plot instead of a line plot?
Answer : Change plot() in plt.plot() to scatter().

Lecture: Histograms
Review Question 1
What is a characteristic of a histogram?
Answer : Histogram is a great tool for getting a first impression about the distribution of your data.

Review Question 2
You are working with a Python list with 10 different values. You divide the values into 5 equally-sized bins.
How wide will these bins be if the lowest value in your list is 0 and the highest is 20?
Answer : 4

Review Question 3
You write the following code:
import matplotlib.pyplot as plt
x = [1, 3, 6, 3, 2, 7, 3, 9, 7, 5, 2, 4]
plt.hist(x)
plt.show()
You need to extend the plt.hist() command to specifically set the number of bins to 4. What should you do?
Answer : Add a second argument to plt.hist(): plt.hist(x, bins = 4)

Lecture: Customization  
Review Question 1
You are customizing a plot by labelling its axes. You need to do this by using matplotlib.
Which code should you use?
Answer : xlabel("x-axis title") and ylabel("y-axis title")

Review Question 2
Which matplotlib function do you use to build a line plot where the area under the graph is colored?
Answer : fill_between()

Review Question 3
Typically, you place all customization commands between the plot() call and the show() call, as follows:
import matplotlib.pyplot as plt
x = [1, 2, 3]
y = [4, 5, 6]
plt.plot(x, y)
# customization here
plt.show()
What will happen if you place the customization code after the show() function instead?
import matplotlib.pyplot as plt
x = [1, 2, 3]
y = [4, 5, 6]
plt.plot(x, y)
plt.show()
# customization here
Answer : Python doesn't throw an error, but you won't see your customizations. 
The show() function displays the plot you've built up until then.
If the customizations come afterwards, there is no effect on the shown output.
